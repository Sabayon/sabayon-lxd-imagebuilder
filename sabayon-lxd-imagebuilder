#!/bin/bash
# Sabayon lxc image builder script
# mudler@sabayon.org, geaaru
set -e
HOST_ARCH="${HOST_ARCH:-amd64}"
ARCH="${ARCH:-`uname -m`}"
IMAGE="${IMAGE:-sabayon/base-amd64}"
DISTRO="${DISTRO:-Sabayon}"
OS="${OS:-sabayon}"
RELEASE="${RELEASE:-16}"
UNPRIVILEGED="${UNPRIVILEGED:-0}"
UNPRIVILEGED_CUSTOM_FUNCTIONS=""
STAGING_DIR="${STAGING_DIR:-`pwd`}"
IMAGE_DESCR="${IMAGE_DESCR}"
IMPORT_IMAGE="${IMPORT_IMAGE:-0}"
LXD_TARGET="local:"
PULL_SKIP="${PULL_SKIP:-0}"

release_date=""

create_metadata() {
   release_epoch=$(date +%s)

   pushd ${STAGING_DIR}

   if [ -z "${IMAGE_DESCR}" ] ; then
      IMAGE_DESCR="$DISTRO $RELEASE ($release_date)"
   fi

   cat <<EOF > metadata.yaml
{
	"architecture": "$ARCH",
	"creation_date": $release_epoch,
	"properties": {
	  "description": "$IMAGE_DESCR",
	  "os": "$OS",
	  "release": "$RELEASE",
	},
	"templates": {
	  "/etc/hosts": {
	    "template": "hosts.tpl",
	    "when": [
	      "create",
	    ]
	  },
	  "/etc/hostname" : {
	    "template": "hostname.tpl",
	    "when": [
	      "create",
	    ]
	  },
	}
}
EOF

   mkdir -p templates

   cat <<EOF > templates/hostname.tpl
{{ container.name }}
EOF

   cat <<EOF > templates/hosts.tpl
127.0.0.1   localhost
127.0.1.1   {{ container.name }}
# The following lines are desirable for IPv6 capable hosts
::1     ip6-localhost ip6-loopback
fe00::0 ip6-localnet
ff00::0 ip6-mcastprefix
ff02::1 ip6-allnodes
ff02::2 ip6-allrouters
EOF

   popd

   return 0
}

die() {
   echo $1

   exit 1
}

package_image() {

   pushd ${STAGING_DIR}

   tar -zcf $OS-$RELEASE-$ARCH-$release_date.tar.gz --numeric-owner metadata.yaml templates rootfs
   rm -f metadata.yaml
   rm -rf templates
   rm -rf rootfs

   popd

   return 0
}


update_docker_companion() {

   type docker-companion >/dev/null 2>&1 || {
      echo >&2 "Fetching docker-companion for you, and placing it under bin/"
      curl -s https://api.github.com/repos/mudler/docker-companion/releases/latest \
         | grep "browser_download_url.*${HOST_ARCH}" \
         | cut -d : -f 2,3 \
         | tr -d \" \
         | wget -i - -N -O docker-companion
      chmod +x docker-companion
   }
}


help_msg() {

   echo "sabayon-lxd-imagebuilder:
Script for create LXD image from Docker image.

-h|--help        This message.
--arch           Set target ARCH. This field is not same of Gentoo ARCH variable.
                 MUST be set based of machine hardware.
                 Example armv7l (for BananaPi), x86_64 (for x86 64bit platform).
                 Default value is: \`uname -m\`.
--host-arch      Set arch of the host where is running docker Server.
                 Default value is: x86_64.
--unprivileged   When this option is enable some activities are done on target
                 image for permit running of the image under unprivileged mode.
                 It's usable only for Sabayon/Gentoo Image with SystemD.
                 Default is disable and created image is for privileged mode.
--unpriv-funcs [FILENAME]
                 Permit to supply custom functions to execute before
                 create tarball for LXD. To use custom functions
                 is needed then device UNPRIVILEGED_FUNCTIONS variable.
--stagingdir     Set staging directory where unpack docker image and create
                 tarball. Default is \`pwd\`.
--image          Docker image to use as source.
                 Default is: sabayon/base-amd64
--import         Automatically import tarball as image to LXD server.
                 Default: disable.
--image-descr    Set image description string.
                 Default is: \$DISTRO \$RELEASE (\$release_date)
                 NOTE: Use date on description doesn't permit
                       to override old image of the same docker image.

Some options could be set also as environment variables:
HOST_ARCH        Alternative to --host-arch option.
ARCH             Alternative to --arch option.
IMAGE            Alternative to --image option.
DISTRO           Identify distro of the image. Default is: Sabayon
OS               Identify OS of the image. Default is: sabayon
RELEASE          Identify Release of the distro. Default is: 16
                 This variable is used only when IMAGE_DESCR or --image-descr
                 is not used.
UNPRIVILEGED     Alternative to --unprivileged option.
UNPRIVILEGED_FUNCTIONS
                 Permits to define list of functions execute on
                 target rootfs. This is needed for use script
                 on docker image not sabayon.
                 On default are executes these functions:
                   - systemd_sysctl
                   - remountfs
                   - journald
                   - dev_hugepages
                   - sec_limits
                   - clean_journal
STAGING_DIR      Alternative to --stagingdir option.
IMAGE_DESCR      Alternative to --image-descr option.
LXD_TARGET       Set target LXD server where import image.
PULL_SKIP        Skip pull of image to force use of local docker
                 image if it is available.

NOTE: This script MUST be execute as root.
"
}

parse_args() {

   local short_opts="h"
   local long_opts="help arch: host-arch: unprivileged stagingdir: image-descr: image: import unpriv-funcs:"

   $(set -- $(getopt -u -q -a -o "$short_opts" -l "$long_opts" -- "$@")) 

   while [ $# -gt 0 ] ; do
      case "$1" in

         -h|--help)
            help_msg
            exit 1
            ;;
         --arch)
            ARCH="$2"
            shift
            ;;
         --host-arch)
            HOST_ARCH="$2"
            shift
            ;;
         --unprivileged)
            UNPRIVILEGED=1
            ;;
         --unpriv-funcs)
            UNPRIVILEGED_CUSTOM_FUNCTIONS="$2"
            shift
            ;;
         --stagingdir)
            STAGING_DIR="$2"
            shift
            ;;
         --image-descr)
            IMAGE_DESCR="$2"
            shift
            ;;
         --image)
            IMAGE="$2"
            shift
            ;;
         --import)
            IMPORT_IMAGE=1
            ;;
         --)
            ;;
         *)
            echo "Invalid parameter $1."
            exit 1
            ;;

      esac

      shift
   done

   return 0
}

import2lxd() {
   local image_type=""

   pushd ${STAGING_DIR}

   if [ ${UNPRIVILEGED} -eq 1 ] ; then
      image_type="unprivileged"
   else
      image_type="privileged"
   fi

   local alias="sabayon-$image_type-$release_date"

   if [ -n "${IMAGE_ALIAS}" ] ; then
      alias="${IMAGE_ALIAS}"
   fi

   lxc image import \
      $OS-$RELEASE-$ARCH-$release_date.tar.gz \
      $LXD_TARGET --alias "${alias}" || return 1

   popd

   return 0
}

unpriv_journald () {

   pushd ${STAGING_DIR}/rootfs/etc/systemd/system

   # Disable systemd-journald-audit.socket because it seems that doesn't
   # start correctly on unprivileged container
   ln -s /dev/null systemd-journald-audit.socket

   popd

   return 0
}

unpriv_remountfs () {

   pushd ${STAGING_DIR}/rootfs/etc/systemd/system

   # Disable systemd-remount-fs.service because on unprivileged container
   # systemd can't remount filesystem
   ln -s /dev/null systemd-remount-fs.service

   popd

   return 0
}

unpriv_systemd_sysctl () {

   pushd ${STAGING_DIR}/rootfs/etc/systemd/system

   # Change execution of service systemd-sysctl to avoid errors.
   mkdir systemd-sysctl.service.d
   cat <<EOF > systemd-sysctl.service.d/00gentoo.conf
[Service]
ExecStart=
ExecStart=/usr/lib/systemd/systemd-sysctl  --prefix=/etc/sysctl.d/
EOF

    popd

    return 0
}

unpriv_dev_hugepages () {

   pushd ${STAGING_DIR}/rootfs/etc/systemd/system

   # Disable mount of hugepages
   ln -s /dev/null dev-hugepages.mount

   popd

   return 0
}

unpriv_sec_limits () {

   pushd ${STAGING_DIR}/rootfs

   # Disable sabayon-anti-fork-bomb limits (already apply to lxc container manager)
   sed -i -e 's/^*/#*/g'   ./etc/security/limits.d/00-sabayon-anti-fork-bomb.conf || return 1
   sed -i -e 's/^root/#root/g'   ./etc/security/limits.d/00-sabayon-anti-fork-bomb.conf || return 1
   popd

   return 0
}

unpriv_clean_journal () {

   pushd ${STAGING_DIR}/rootfs/etc/systemd/system

   # Clean journal directory (to avoid permission errors)
   rm -rf ${STAGING_DIR}/rootfs/var/log/journal/

   popd

}

unprivileged_rootfs() {

   local func=""
   local def_unpriv_tasks=(
      "systemd_sysctl"
      "remountfs"
      "journald"
      "dev_hugepages"
      "sec_limits"
      "clean_journal"
   )

   if [ -n "${UNPRIVILEGED_CUSTOM_FUNCTIONS}" ] ; then
      source ${UNPRIVILEGED_CUSTOM_FUNCTIONS} || \
         die "Error on source file ${UNPRIVILEGED_CUSTOM_FUNCTIONS}"
   fi

   if [ -n "${UNPRIVILEGED_FUNCTIONS}" ] ; then
      def_unpriv_tasks=${UNPRIVILEGED_FUNCTIONS}
   fi

   for func in ${def_unpriv_tasks} ; do
      if type -t unpriv_${func} > /dev/null ; then
         echo "Executing function unpriv_${func}..."
         unpriv_${func}
      else
         echo "Function unpriv_${func} not found."
      fi
   done

   return 0
}

export_docker_rootfs () {

   local tmp_container="tmp$(date +%Y%m%d_%H%M%s)"

   local opts=""

   if [[ -z "${PULL_SKIP}"  ||  "${PULL_SKIP}" == "0" ]] ; then
     opts="--pull"
   fi

   [[ -e "docker-companion" ]] \
      && ./docker-companion ${opts} unpack "${IMAGE}" ${STAGING_DIR}/rootfs \
      || docker-companion ${opts} unpack "${IMAGE}" ${STAGING_DIR}/rootfs

   return 0
}

main() {

   parse_args "$@"

   if [ "$(id -u)" != "0" ]; then
      echo "This script must be run as root" 1>&2
      exit 1
   fi

#   update_docker_companion

   export_docker_rootfs

   release_date=$(date +%Y%m%d_%H%M)
   create_metadata || die "Failed to create metadata"

   if [ ${UNPRIVILEGED} -eq 1 ] ; then
      unprivileged_rootfs || die "Error on unprivileged rootfs"
   fi

   package_image || die "Failed to package image"

   if [ ${IMPORT_IMAGE} -eq 1 ] ; then
      import2lxd || die "Error on import image to LXD server $LXD_TARGET."
   fi

   exit 0

}

main "$@"

